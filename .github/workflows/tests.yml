name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      WWWGROUP: 1000
      WWWUSER: 1000
      DB_DATABASE: testing
      DB_USERNAME: root
      DB_PASSWORD: password

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create ENV files
        run: |
          echo "🔧 Creating environment files..."
          cp .env.testing.example .env
          cp .env.testing.example .env.testing

          echo "⚙️ Setting application key..."
          php artisan key:generate --env=testing

          echo "✅ Environment setup complete!"

      - name: Install Dependencies
        run: |
          echo "📦 Installing Composer dependencies..."
          docker run --rm -u "1000:1000" \
            -v "$(pwd):/var/www/html" \
            -w /var/www/html \
            laravelsail/php84-composer:latest \
            composer install --ignore-platform-reqs

      - name: Set up Docker
        run: |
          echo "🐳 Building Docker containers..."
          docker compose build --build-arg WWWGROUP=1000 --build-arg WWWUSER=1000

          echo "🚀 Starting Docker containers..."
          docker compose up -d

          echo "📊 Container Status:"
          docker compose ps

          echo "⏳ Waiting for services to be ready..."
          sleep 10

          echo "🔍 Container Logs:"
          docker compose logs

      - name: Setup Application
        run: |
          echo "📁 Preparing storage..."
          docker compose exec -T laravel.test php artisan storage:link
          mkdir -p storage/app/public/lawns
          mkdir -p storage/app/private/livewire-tmp
          mkdir -p storage/app/public/archive
          chmod -R 777 storage bootstrap/cache

      - name: Run Tests
        run: |
          docker compose exec -T laravel.test php artisan test:clear
          docker compose exec -T laravel.test composer test

      - name: Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            storage/logs/*.log
            docker compose logs > docker.log
            .env
            .env.testing

      - name: Cleanup
        if: always()
        run: docker compose down
