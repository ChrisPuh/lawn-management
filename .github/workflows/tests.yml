name: Laravel CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      WWWGROUP: 1000
      WWWUSER: 1000
      DB_DATABASE: testing
      DB_USERNAME: root
      DB_PASSWORD: root

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, intl
          coverage: xdebug

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Prepare Environment Files
        run: |
          cp .env.example .env
          cp .env.example .env.testing
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' .env.testing
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=root/' .env.testing

      - name: Start Docker Containers
        run: |
          docker-compose up -d
          docker ps
          docker-compose ps

      - name: Wait for MySQL to be ready
        run: |
          while ! docker-compose exec -T mysql mysqladmin ping -h mysql -u root -proot &> /dev/null; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
          echo "MySQL is ready!"

      - name: Install Composer Dependencies
        run: |
          docker-compose exec -T laravel.test composer install --prefer-dist --no-progress

      - name: Generate Application Key
        run: |
          docker-compose exec -T laravel.test php artisan key:generate
          docker-compose exec -T laravel.test php artisan key:generate --env=testing

      - name: Run Database Migrations
        run: |
          docker-compose exec -T laravel.test php artisan migrate:fresh --env=testing

      - name: Run Pest Tests with Coverage
        run: |
          docker-compose exec -T laravel.test composer test

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true
          flags: unittests

      - name: Archive Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: |
            storage/logs/laravel.log
            docker-compose.yml
            .env
            .env.testing
            storage/logs/*.log

      - name: Tear Down Docker Containers
        if: always()
        run: |
          docker-compose down
          docker volume prune -f
