steps:
  # Debugging: Print environment and tool versions
  - name: 'alpine'
    entrypoint: sh
    args:
      - '-c'
      - |
        echo "Build environment information:"
        echo "Timestamp: $(date)"
        echo "Hostname: $(hostname)"
        echo "Operating System:"
        cat /etc/os-release || echo "OS info not available"

  # Install Composer dependencies
  - name: 'composer:2'
    args: ['install', '--no-dev', '--no-interaction', '--optimize-autoloader']

  # Copy environment file and generate app key
  - name: 'debian'
    args:
      - 'bash'
      - '-c'
      - |
        cp .env.example .env
        sed -i "s/APP_KEY=/APP_KEY=$$(php artisan key:generate --show)/" .env

  # Install Node.js dependencies and build frontend
  - name: 'node:20'
    entrypoint: bash
    args:
      - '-c'
      - |
        npm ci
        npm run build

  # Run database migrations
  - name: 'php:8.4'
    entrypoint: bash
    args:
      - '-c'
      - |
        php artisan config:clear
        php artisan migrate --force --verbose
        php artisan db:seed --force --verbose

  # Create storage link
  - name: 'php:8.4'
    entrypoint: php
    args: ['artisan', 'storage:link', '--force']

  # Optimize application
  - name: 'php:8.4'
    entrypoint: php
    args:
      - 'artisan'
      - 'optimize'
      - '--verbose'

  # Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/lawn-app:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/lawn-app:latest',
      '.'
    ]

  # Push Docker images
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'gcr.io/$PROJECT_ID/lawn-app'
    ]

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'lawn-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/lawn-app:$COMMIT_SHA'
      - '--region'
      - 'europe-west3'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-env-vars'
      - 'APP_ENV=production,APP_DEBUG=false'
      # Fügen Sie hier weitere Umgebungsvariablen hinzu

  # Optional: Run post-deployment health check
  - name: 'curlimages/curl'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        sleep 30  # Warte 30 Sekunden nach dem Deployment
        curl -f https://lawn-app-18073593475.europe-west3.run.app/health || exit 1

# Zusätzliche Konfigurationen
images:
  - 'gcr.io/$PROJECT_ID/lawn-app:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/lawn-app:latest'

# Timeouts und Optionen
timeout: '1800s'  # 30 Minuten maximale Build-Zeit
options:
  machineType: 'E2_HIGHCPU_8'  # Größere Maschine für komplexe Builds
